services:
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    depends_on:
      - auth-service
      - landing-page
      - hello-world-app

  database:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=microservices_platform
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=secure_password_change_in_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d microservices_platform"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    environment:
      - PORT=3001
      - SESSION_SECRET=dev-secret-key-change-in-production
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - BASE_URL=https://kl-pi.tail9f5728.ts.net
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=postgresql://app_user:secure_password_change_in_production@database:5432/microservices_platform
    volumes:
      - ./auth-service/data:/app/data
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy

  landing-page:
    build: ./landing-page
    environment:
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:3001
      - HELLO_WORLD_URL=http://hello-world-app:3002
      - CHAT_APP_URL=http://localhost:3003
      - BASE_URL=https://kl-pi.tail9f5728.ts.net
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  hello-world-app:
    build: ./hello-world-app
    environment:
      - PORT=3002
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FRONTEND_URL=https://kl-pi.tail9f5728.ts.net
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-data:
  caddy_data:
  caddy_config:
  postgres_data:
