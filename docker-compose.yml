services:
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    depends_on:
      - auth-service
      - landing-page
      - hello-world-app

  database:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    environment:
      - PORT=3001
      - SESSION_SECRET=dev-secret-key-change-in-production
      - JWT_SECRET=7aa5c54ef4656dc9141d86d0448995227515021093db7bad9c10a085bef3b00fab31da0e2bdde0a55b481a66f233127f3c74eeb9cb035595bbfa6f5e478795fd
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - BASE_URL=https://kl-pi.tail9f5728.ts.net
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
    volumes:
      - ./auth-service/data:/app/data
    networks:
      - app-network
    depends_on:
      database:
        condition: service_healthy

  landing-page:
    build: ./landing-page
    environment:
      - PORT=3000
      - JWT_SECRET=7aa5c54ef4656dc9141d86d0448995227515021093db7bad9c10a085bef3b00fab31da0e2bdde0a55b481a66f233127f3c74eeb9cb035595bbfa6f5e478795fd
      - AUTH_SERVICE_URL=http://auth-service:3001
      - HELLO_WORLD_URL=http://hello-world-app:3002
      - CHAT_APP_URL=http://localhost:3003
      - BASE_URL=https://kl-pi.tail9f5728.ts.net
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  hello-world-app:
    build: ./hello-world-app
    environment:
      - PORT=3002
      - JWT_SECRET=7aa5c54ef4656dc9141d86d0448995227515021093db7bad9c10a085bef3b00fab31da0e2bdde0a55b481a66f233127f3c74eeb9cb035595bbfa6f5e478795fd
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FRONTEND_URL=https://kl-pi.tail9f5728.ts.net
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  lol-tracking-service:
    build: ./lol-tracking-service
    environment:
      - PORT=3003
      - AUTH_SERVICE_URL=http://auth-service:3001
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - RIOT_API_KEY=${RIOT_API_KEY}
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  hearts-game-service:
    build: ./hearts-game-service
    environment:
      - PORT=3004
      - JWT_SECRET=7aa5c54ef4656dc9141d86d0448995227515021093db7bad9c10a085bef3b00fab31da0e2bdde0a55b481a66f233127f3c74eeb9cb035595bbfa6f5e478795fd
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  training-peaks-service:
    build: ./training-peaks-service
    environment:
      - PORT=3005
      - NODE_ENV=production
      - JWT_SECRET=7aa5c54ef4656dc9141d86d0448995227515021093db7bad9c10a085bef3b00fab31da0e2bdde0a55b481a66f233127f3c74eeb9cb035595bbfa6f5e478795fd
      - AUTH_SERVICE_URL=http://auth-service:3001
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      - ENCRYPTION_SECRET=${ENCRYPTION_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_APP_PASSWORD=${EMAIL_APP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - ./training-peaks-service/data:/app/data
    depends_on:
      database:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./system-monitor/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://kl-pi.tail9f5728.ts.net/monitor/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_DOMAIN=kl-pi.tail9f5728.ts.net
    volumes:
      - ./system-monitor/grafana/provisioning:/etc/grafana/provisioning
      - ./system-monitor/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-data:
  caddy_data:
  caddy_config:
  postgres_data:
  prometheus_data:
  grafana_data:
